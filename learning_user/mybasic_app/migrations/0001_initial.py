# Generated by Django 2.2.5 on 2020-05-16 20:03

import ckeditor.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_chercheur', models.BooleanField(default=False)),
                ('is_evaluteur', models.BooleanField(default=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('Organization', models.CharField(max_length=100)),
                ('Phone', models.CharField(max_length=20, unique=True)),
                ('City', models.CharField(max_length=100)),
                ('Post_code', models.CharField(max_length=20)),
                ('Country', models.CharField(max_length=100)),
                ('Address_line_principale', models.CharField(blank=True, max_length=200)),
                ('Address_line', models.CharField(blank=True, max_length=200)),
                ('profile_pict', models.ImageField(blank=True, default='photo_defaut-profile', upload_to='profile_piccs')),
                ('site_Personnel', models.URLField(blank=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['-created_on'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Commite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Organizationof_Commite', models.CharField(max_length=200, verbose_name='Commite dans le theme')),
                ('autre_Info', models.CharField(max_length=200)),
                ('sepiceilite', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
            options={
                'verbose_name': 'Commites',
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, null=True)),
                ('description', models.TextField(max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Chercheur',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Evaluateur',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('Code_Eval', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='ToDolist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='todolist', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=300)),
                ('complete', models.BooleanField()),
                ('todolist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mybasic_app.ToDolist')),
            ],
        ),
        migrations.CreateModel(
            name='Conferance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, null=True, unique=True)),
                ('email', models.EmailField(max_length=254, null=True, unique=True)),
                ('link', models.URLField(blank=True)),
                ('start_day_sub', models.DateField()),
                ('end_day_sub', models.DateField()),
                ('start_day_eval', models.DateField()),
                ('end_day_eval', models.DateField()),
                ('adress', models.CharField(max_length=200, null=True)),
                ('country', models.CharField(max_length=200, null=True)),
                ('postal_code', models.PositiveIntegerField(null=True)),
                ('city', models.CharField(max_length=100, null=True)),
                ('description', models.TextField(max_length=200, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('Commite', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='mybasic_app.Commite')),
                ('topic', models.ManyToManyField(to='mybasic_app.Topic')),
            ],
            options={
                'ordering': ['-date_created', 'updated'],
            },
        ),
        migrations.AddField(
            model_name='commite',
            name='evaluteur_list',
            field=models.ManyToManyField(to='mybasic_app.Evaluateur'),
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, null=True, unique=True)),
                ('description', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('date_posté', models.DateTimeField(auto_now_add=True)),
                ('document', models.FileField(upload_to='documents_Chercheur/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('Conferance', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='mybasic_app.Conferance')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='mybasic_app.Chercheur')),
            ],
            options={
                'ordering': ['-date_posté'],
            },
        ),
    ]
